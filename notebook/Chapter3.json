{
	"name": "Chapter3",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "cspool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "caec946b-4c42-48ec-8b26-f99de2408198"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/260b4611-3e0a-47b3-8502-1e88711083bb/resourceGroups/CloudSpark/providers/Microsoft.Synapse/workspaces/cloudsparksynapse/bigDataPools/cspool",
				"name": "cspool",
				"type": "Spark",
				"endpoint": "https://cloudsparksynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/cspool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark = SparkSession.builder.getOrCreate()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Structured Streaming"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staticDataFrame = spark.read.format(\"csv\") \\\r\n",
					"                .option(\"header\",\"true\") \\\r\n",
					"                .option(\"inferSchema\", \"true\")\\\r\n",
					"                .load(\"abfss://sparkbook@cloudsparkstorage.dfs.core.windows.net/data/data/retail-data/by-day/*.csv\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staticDataFrame.createOrReplaceTempView(\"retail_data\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staticSchema = staticDataFrame.schema"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import window, column, desc, col\r\n",
					"staticDataFrame\\\r\n",
					"    .selectExpr(\r\n",
					"        \"CustomerId\",\r\n",
					"        \"(UnitPrice * Quantity) as total_cost\",\r\n",
					"        \"InvoiceDate\")\\\r\n",
					"    .groupBy(\r\n",
					"        col(\"CustomerId\"), window(col(\"InvoiceDate\"), \"1 day\"))\\\r\n",
					"    .sum(\"total_cost\")\\\r\n",
					"    .sort(desc(\"sum(total_cost)\"))\\\r\n",
					"    .show(5, truncate=False)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"streamingDataFrame = spark.readStream\\\r\n",
					"                        .schema(staticSchema)\\\r\n",
					"                        .option(\"maxFilesPerTrigger\", 1)\\\r\n",
					"                        .format(\"csv\")\\\r\n",
					"                        .option(\"header\",\"true\")\\\r\n",
					"                        .load(\"abfss://sparkbook@cloudsparkstorage.dfs.core.windows.net/data/data/retail-data/by-day/*.csv\")"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"streamingDataFrame.isStreaming"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"purchaseByCustomerPerHour = streamingDataFrame \\\r\n",
					"                            .selectExpr(\r\n",
					"                                \"CustomerId\",\r\n",
					"                                \"(UnitPrice * Quantity) as total_cost\",\r\n",
					"                                \"InvoiceDate\")\\\r\n",
					"                            .groupBy(col(\"CustomerId\"), window(col(\"InvoiceDate\"), \"1 day\"))\\\r\n",
					"                            .sum(\"total_cost\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"purchaseByCustomerPerHour.writeStream\\\r\n",
					"                        .format(\"memory\")\\\r\n",
					"                        .queryName(\"customer_purchases\")\\\r\n",
					"                        .outputMode(\"complete\")\\\r\n",
					"                        .start()"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"\"\"\r\n",
					"    SELECT *\r\n",
					"    FROM customer_purchases\r\n",
					"    ORDER BY `sum(total_cost)` DESC\r\n",
					"\"\"\")\\\r\n",
					".show(5)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"purchaseByCustomerPerHour.writeStream.format(\"console\")\\\r\n",
					"                        .queryName(\"customer_purchase_2\")\\\r\n",
					"                        .outputMode(\"complete\")\\\r\n",
					"                        .start()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}